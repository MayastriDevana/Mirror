//
//  MirrorView.swift
//  Mirror
//
//  Created by User on 02/05/24.
//

import SwiftUI

struct MirrorView: View {
    @StateObject private var skincareVM = SkincareVM()
    
    @State private var selectedSkinType: SkinTypes  = .Berminyak
    @State private var selectedSkinConcern: SkinConcerns = .Komedo
    
    var body: some View {
        NavigationStack{
            Form{
                // MARK: - PICKER VIEW
                
                Section{
                    Picker(selection: $selectedSkinType) {
                        ForEach(SkinTypes.allCases){ skinType in Text(skinType.rawValue)
                                .font(.subheadline)
                                .foregroundStyle(.black)
                                .tag(skinType)
                        }
                    }label:{
                        Text("Skin Type")
                            .foregroundStyle(.gray)
                    }
                    Picker(selection: $selectedSkinConcern) {
                        ForEach(SkinConcerns.allCases){ skinConcern in Text(skinConcern.rawValue)
                                .font(.subheadline)
                                .foregroundStyle(.black)
                                .tag(skinConcern)
                        }
                    }label:{
                        Text("Skin Concern")
                            .foregroundStyle(.gray)
                    }
                }
            header: {
                Text("Beauty Profile")
            }footer: {
                Text("Choose any your skin type & skin concern.")
            }
                // MARK: - TEXT EDITOR
                Section{
                    TextEditor(text: $skincareVM.displaySkincareText)
                        .frame(height: 200)
                        .font(.system(.headline, design: .rounded))
                        .foregroundStyle(.blue)
                        .disabled(skincareVM.isLoading)
                        .overlay{
                            skincareVM.isLoading ? ProgressView() : nil
                        }
                    
                }header: {
                    Text("Recomendation")
                } footer: {
                    Text("This storie are being generated by Gemini AI.")
                }
                
                // MARK: - GENERATE STORY
                Button{
                    generateRecomendation()
                }label: {
                    if skincareVM.isLoading{
                        ProgressView().scaleEffect(1)
                    }else{
                        Text("Generate".uppercased())
                    }
                    
                }
                .buttonStyle(PlainButtonStyle())
                .frame(minWidth: 0, maxWidth: .infinity)
                
                
            }
            .navigationTitle("Stories")
            .tint(.primary)
            .toolbar {
                ToolbarItem(placement: .topBarTrailing){
                    Button {
                        skincareVM.displaySkincareText = ""
                    }label: {
                        Image(systemName: "arrow.clockwise")
                    }
                }
            }
        }
    }
}

#Preview {
    MirrorView()
}
extension MirrorView {
    func generateRecomendation(){
        Task{
            await skincareVM.Recomendation(skinType: selectedSkinType, skinConcern: selectedSkinConcern)
        }
    }
}
